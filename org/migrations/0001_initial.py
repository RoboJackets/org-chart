# Generated by Django 5.1.7 on 2025-03-27 22:46
# pylint: skip-file
# mypy: ignore-errors

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import org.apiary
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "apiary_user_id",
                    models.IntegerField(
                        blank=True, null=True, unique=True, verbose_name="Apiary user ID"
                    ),
                ),
                (
                    "ramp_user_id",
                    models.UUIDField(
                        blank=True, null=True, unique=True, verbose_name="Ramp user ID"
                    ),
                ),
                (
                    "keycloak_user_id",
                    models.UUIDField(
                        blank=True, null=True, unique=True, verbose_name="Keycloak user ID"
                    ),
                ),
                (
                    "google_workspace_user_id",
                    models.CharField(blank=True, max_length=100, null=True, unique=True),
                ),
                (
                    "slack_user_id",
                    models.CharField(blank=True, max_length=9, null=True, unique=True),
                ),
                (
                    "member_of_apiary_team",
                    models.IntegerField(
                        blank=True,
                        choices=org.apiary.get_teams,
                        help_text="If this person is in a position, the primary team for their position will take precedence.",
                        null=True,
                        verbose_name="Primary team",
                    ),
                ),
                (
                    "manual_hierarchy",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the reporting position or primary team have been set manually. Both values may be automatically changed based on Apiary data if this is not enabled.",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "person",
                "verbose_name_plural": "people",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Position",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The short-form title of this position, not including a team name.",
                        max_length=100,
                        verbose_name="Short title",
                    ),
                ),
                (
                    "manages_apiary_team",
                    models.IntegerField(
                        blank=True,
                        choices=org.apiary.get_teams,
                        help_text="If this position is the primary leader for a team, select it here. Only one position can be the team manager.",
                        null=True,
                        unique=True,
                        verbose_name="Manages team",
                    ),
                ),
                (
                    "member_of_apiary_team",
                    models.IntegerField(
                        choices=org.apiary.get_teams,
                        help_text="The primary team this position supports.",
                        verbose_name="Primary team",
                    ),
                ),
                (
                    "person",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reports_to_position",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="org.position",
                        verbose_name="Reports to",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="person",
            name="reports_to_position",
            field=models.ForeignKey(
                blank=True,
                help_text="If this person is in a position, the reporting position for their position will take precedence.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="direct_reports",
                to="org.position",
                verbose_name="Reports to",
            ),
        ),
        migrations.AddConstraint(
            model_name="position",
            constraint=models.UniqueConstraint(
                fields=("name", "member_of_apiary_team"), name="unique_name_within_team"
            ),
        ),
    ]
